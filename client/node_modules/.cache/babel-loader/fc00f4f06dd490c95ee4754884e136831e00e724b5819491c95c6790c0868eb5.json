{"ast":null,"code":"import _toConsumableArray from \"/Users/jadyn/Bootcamp/knowledge-buddy/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/jadyn/Bootcamp/knowledge-buddy/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"/Users/jadyn/Bootcamp/knowledge-buddy/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Users/jadyn/Bootcamp/knowledge-buddy/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/jadyn/Bootcamp/knowledge-buddy/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { collectFields } from './collectFields.mjs';\nimport { assertValidExecutionArguments, buildExecutionContext, buildResolveInfo, execute, getFieldDef } from './execute.mjs';\nimport { mapAsyncIterator } from './mapAsyncIterator.mjs';\nimport { getArgumentValues } from './values.mjs';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport function subscribe(_x) {\n  return _subscribe.apply(this, arguments);\n}\nfunction _subscribe() {\n  _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(args) {\n    var resultOrStream,\n      mapSourceToResponse,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          // Temporary for v15 to v16 migration. Remove in v17\n          _args.length < 2 || devAssert(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');\n          _context.next = 3;\n          return createSourceEventStream(args);\n        case 3:\n          resultOrStream = _context.sent;\n          if (isAsyncIterable(resultOrStream)) {\n            _context.next = 6;\n            break;\n          }\n          return _context.abrupt(\"return\", resultOrStream);\n        case 6:\n          // For each payload yielded from a subscription, map it over the normal\n          // GraphQL `execute` function, with `payload` as the rootValue.\n          // This implements the \"MapSourceToResponseEvent\" algorithm described in\n          // the GraphQL specification. The `execute` function provides the\n          // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n          // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n          mapSourceToResponse = function mapSourceToResponse(payload) {\n            return execute(_objectSpread(_objectSpread({}, args), {}, {\n              rootValue: payload\n            }));\n          }; // Map every source value to a ExecutionResult value as described above.\n          return _context.abrupt(\"return\", mapAsyncIterator(resultOrStream, mapSourceToResponse));\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _subscribe.apply(this, arguments);\n}\nfunction toNormalizedArgs(args) {\n  var firstArg = args[0];\n  if (firstArg && 'document' in firstArg) {\n    return firstArg;\n  }\n  return {\n    schema: firstArg,\n    // FIXME: when underlying TS bug fixed, see https://github.com/microsoft/TypeScript/issues/31613\n    document: args[1],\n    rootValue: args[2],\n    contextValue: args[3],\n    variableValues: args[4],\n    operationName: args[5],\n    subscribeFieldResolver: args[6]\n  };\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nexport function createSourceEventStream() {\n  return _createSourceEventStream.apply(this, arguments);\n}\nfunction _createSourceEventStream() {\n  _createSourceEventStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var _len,\n      rawArgs,\n      _key,\n      args,\n      schema,\n      document,\n      variableValues,\n      exeContext,\n      eventStream,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          for (_len = _args2.length, rawArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n            rawArgs[_key] = _args2[_key];\n          }\n          args = toNormalizedArgs(rawArgs);\n          schema = args.schema, document = args.document, variableValues = args.variableValues; // If arguments are missing or incorrectly typed, this is an internal\n          // developer mistake which should throw an early error.\n          assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n          // a \"Response\" with only errors is returned.\n          exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n          if ('schema' in exeContext) {\n            _context2.next = 7;\n            break;\n          }\n          return _context2.abrupt(\"return\", {\n            errors: exeContext\n          });\n        case 7:\n          _context2.prev = 7;\n          _context2.next = 10;\n          return executeSubscription(exeContext);\n        case 10:\n          eventStream = _context2.sent;\n          if (isAsyncIterable(eventStream)) {\n            _context2.next = 13;\n            break;\n          }\n          throw new Error('Subscription field must return Async Iterable. ' + \"Received: \".concat(inspect(eventStream), \".\"));\n        case 13:\n          return _context2.abrupt(\"return\", eventStream);\n        case 16:\n          _context2.prev = 16;\n          _context2.t0 = _context2[\"catch\"](7);\n          if (!(_context2.t0 instanceof GraphQLError)) {\n            _context2.next = 20;\n            break;\n          }\n          return _context2.abrupt(\"return\", {\n            errors: [_context2.t0]\n          });\n        case 20:\n          throw _context2.t0;\n        case 21:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[7, 16]]);\n  }));\n  return _createSourceEventStream.apply(this, arguments);\n}\nfunction executeSubscription(_x2) {\n  return _executeSubscription.apply(this, arguments);\n}\nfunction _executeSubscription() {\n  _executeSubscription = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(exeContext) {\n    var schema, fragments, operation, variableValues, rootValue, rootType, rootFields, _, responseName, fieldNodes, fieldDef, fieldName, path, info, _fieldDef$subscribe, args, contextValue, resolveFn, eventStream;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          schema = exeContext.schema, fragments = exeContext.fragments, operation = exeContext.operation, variableValues = exeContext.variableValues, rootValue = exeContext.rootValue;\n          rootType = schema.getSubscriptionType();\n          if (!(rootType == null)) {\n            _context3.next = 4;\n            break;\n          }\n          throw new GraphQLError('Schema is not configured to execute subscription operation.', {\n            nodes: operation\n          });\n        case 4:\n          rootFields = collectFields(schema, fragments, variableValues, rootType, operation.selectionSet);\n          _ = _slicedToArray(_toConsumableArray(rootFields.entries())[0], 2), responseName = _[0], fieldNodes = _[1];\n          fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n          if (fieldDef) {\n            _context3.next = 10;\n            break;\n          }\n          fieldName = fieldNodes[0].name.value;\n          throw new GraphQLError(\"The subscription field \\\"\".concat(fieldName, \"\\\" is not defined.\"), {\n            nodes: fieldNodes\n          });\n        case 10:\n          path = addPath(undefined, responseName, rootType.name);\n          info = buildResolveInfo(exeContext, fieldDef, fieldNodes, rootType, path);\n          _context3.prev = 12;\n          // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n          // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n          // Build a JS object of arguments from the field.arguments AST, using the\n          // variables scope to fulfill any variable references.\n          args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n          // is provided to every resolve function within an execution. It is commonly\n          // used to represent an authenticated user, or request-specific caches.\n          contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n          // AsyncIterable yielding raw payloads.\n          resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.subscribeFieldResolver;\n          _context3.next = 18;\n          return resolveFn(rootValue, args, contextValue, info);\n        case 18:\n          eventStream = _context3.sent;\n          if (!(eventStream instanceof Error)) {\n            _context3.next = 21;\n            break;\n          }\n          throw eventStream;\n        case 21:\n          return _context3.abrupt(\"return\", eventStream);\n        case 24:\n          _context3.prev = 24;\n          _context3.t0 = _context3[\"catch\"](12);\n          throw locatedError(_context3.t0, fieldNodes, pathToArray(path));\n        case 27:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[12, 24]]);\n  }));\n  return _executeSubscription.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}