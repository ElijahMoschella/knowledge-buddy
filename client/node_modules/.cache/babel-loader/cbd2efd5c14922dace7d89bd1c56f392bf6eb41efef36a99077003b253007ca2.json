{"ast":null,"code":"import _createClass from \"/Users/jadyn/Bootcamp/knowledge-buddy/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/jadyn/Bootcamp/knowledge-buddy/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/jadyn/Bootcamp/knowledge-buddy/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/jadyn/Bootcamp/knowledge-buddy/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Users/jadyn/Bootcamp/knowledge-buddy/client/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport { inspect } from './inspect.mjs';\n/**\n * Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\n */\n\nexport function toError(thrownValue) {\n  return thrownValue instanceof Error ? thrownValue : new NonErrorThrown(thrownValue);\n}\nvar NonErrorThrown = /*#__PURE__*/function (_Error) {\n  _inherits(NonErrorThrown, _Error);\n  var _super = _createSuper(NonErrorThrown);\n  function NonErrorThrown(thrownValue) {\n    var _this;\n    _classCallCheck(this, NonErrorThrown);\n    _this = _super.call(this, 'Unexpected error value: ' + inspect(thrownValue));\n    _this.name = 'NonErrorThrown';\n    _this.thrownValue = thrownValue;\n    return _this;\n  }\n  return _createClass(NonErrorThrown);\n}( /*#__PURE__*/_wrapNativeSuper(Error));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}