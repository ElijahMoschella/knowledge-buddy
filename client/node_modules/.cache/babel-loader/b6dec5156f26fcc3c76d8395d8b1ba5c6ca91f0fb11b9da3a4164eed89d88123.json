{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/jadyn/Bootcamp/knowledge-buddy/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nexport function UniqueOperationTypesRule(context) {\n  var schema = context.getSchema();\n  var definedOperationTypes = Object.create(null);\n  var existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // See: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];\n    var _iterator = _createForOfIteratorHelper(operationTypesNodes),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var operationType = _step.value;\n        var operation = operationType.operation;\n        var alreadyDefinedOperationType = definedOperationTypes[operation];\n        if (existingOperationTypes[operation]) {\n          context.reportError(new GraphQLError(\"Type for \".concat(operation, \" already defined in the schema. It cannot be redefined.\"), {\n            nodes: operationType\n          }));\n        } else if (alreadyDefinedOperationType) {\n          context.reportError(new GraphQLError(\"There can be only one \".concat(operation, \" type in schema.\"), {\n            nodes: [alreadyDefinedOperationType, operationType]\n          }));\n        } else {\n          definedOperationTypes[operation] = operationType;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return false;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}