{"ast":null,"code":"import _toConsumableArray from \"/Users/jadyn/Bootcamp/knowledge-buddy/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/jadyn/Bootcamp/knowledge-buddy/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { collectFields } from '../../execution/collectFields.mjs';\n\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\nexport function SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        var schema = context.getSchema();\n        var subscriptionType = schema.getSubscriptionType();\n        if (subscriptionType) {\n          var operationName = node.name ? node.name.value : null;\n          var variableValues = Object.create(null);\n          var document = context.getDocument();\n          var fragments = Object.create(null);\n          var _iterator = _createForOfIteratorHelper(document.definitions),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var definition = _step.value;\n              if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n                fragments[definition.name.value] = definition;\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          var fields = collectFields(schema, fragments, variableValues, subscriptionType, node.selectionSet);\n          if (fields.size > 1) {\n            var fieldSelectionLists = _toConsumableArray(fields.values());\n            var extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            var extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(new GraphQLError(operationName != null ? \"Subscription \\\"\".concat(operationName, \"\\\" must select only one top level field.\") : 'Anonymous Subscription must select only one top level field.', {\n              nodes: extraFieldSelections\n            }));\n          }\n          var _iterator2 = _createForOfIteratorHelper(fields.values()),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var fieldNodes = _step2.value;\n              var field = fieldNodes[0];\n              var fieldName = field.name.value;\n              if (fieldName.startsWith('__')) {\n                context.reportError(new GraphQLError(operationName != null ? \"Subscription \\\"\".concat(operationName, \"\\\" must not select an introspection top level field.\") : 'Anonymous Subscription must not select an introspection top level field.', {\n                  nodes: fieldNodes\n                }));\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      }\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}